import ipdb; ipdb.set_trace()

UPDATE stock_picking SET state = 'cancel' WHERE id = 19565;
UPDATE stock_move SET state = 'cancel' WHERE picking_id = 19565;

select id, product_image, BIT_LENGTH(product_image) as tam from product_product where BIT_LENGTH(product_image) > 0 order by tam desc
dividimos entre 8

liberar RAM: 
sudo sync
sudo sysctl -w vm.drop_caches=3

SELECT id, model, res_id from ir_model_data ORDER BY model, res_id;

        print 'validate 2 <------', time.strftime('%Y-%m-%d %H:%M:%S')
        print '==================================='
'user_id': lambda self,cr,uid,ctx: uid,

======================================
REGISTRAR LOG
======================================
                message = _("Procurement '%s' has an exception: 'No BoM defined for this product !'") % name
                self.log(cr, uid, id, message)
                id = es el id (integer) del registro que se logea  


IVAS CORREGIDOS TODOS EN COPIA DE 03-09-2015

cuando haga updates all ver en eln_sale/sale_order_view.xml se modifica la vista de las direcciones en el pedido y revisar que no pise el
onchange del partner que tiene que ser 
on_change="onchange_partner_id3(partner_id, early_payment_discount, payment_term, shop_id)"

SELECT id, origin, product_uos_qty, 
       product_uom, price_unit, prodlot_id, 
       move_dest_id, product_qty, product_uos, location_id, name, 
       product_id, company_id, 
       picking_id, location_dest_id,  
       production_id       
  FROM stock_move
  ORDER BY id DESC LIMIT 21;


--log-level=LOG_LEVEL ['info', 'debug_rpc', 'warn', 'critical', 'error','debug', 'notset']

*
lot_marc eliminarlo o modificarlo por product_marking_code en res.partner
además actualizar stock_picking_data.xml en eln_reports
*
se incluye dependencia picking.invoice_rel en eln_edi
*
en edi.doc eliminar o modificar
        'gln_e': por gln_ef
        'gln_v': por gln_ve
        'gln_c': por gln_co
        'gln_r': por gln_rf

*
revisar edi_code en product.uom. ver que tipo de código es y detallarlo en la ayuda si es posible o bien eliminarlo y preseleccionarlo por codigo
lo mismo en account.tax con code

***
eliminamos center_code y fiscal_position en res.partner.address
***
borramos de ir.property donde name=property_account_position_eln
DELETE FROM ir_property WHERE name = 'property_account_position_eln'
*
borramos code en account.tax





SQL:
ALTER TABLE res_partner DROP lot_marc;
ALTER TABLE edi_doc DROP gln_e;
ALTER TABLE edi_doc DROP gln_v;
ALTER TABLE edi_doc DROP gln_c;
ALTER TABLE edi_doc DROP gln_r;
ALTER TABLE res_partner_address DROP center_code;
DELETE FROM ir_property WHERE name = 'property_account_position_eln';
DELETE FROM ir_property WHERE name = 'fiscal_position';
ALTER TABLE account_tax DROP code;

======================================
NUEVOS CAMBIOS EDI
======================================
UPDATE 
  public.res_partner_address
SET
  gln_rm = gln,
  gln_de = '8481061777773',
  gln_rf = '8481061777773',
  gln_co = '8481061777773'
WHERE 
  type = 'delivery' and partner_id = 175;

ALTER TABLE res.partner DROP gln;
ALTER TABLE res.partner.address DROP gln;


Ver los ids de las listas de materiales que tienen alguno de sus componentes al propio producto
=======================================================================================
SELECT  
T1.id, T1.code, T1.name, T1.product_id, T1.bom_id, T1.routing_id, T2.id, T2.code, T2.name, T2.product_id, T2.bom_id, T2.routing_id
FROM mrp_bom T1, mrp_bom T2 
WHERE 
T1.id = T2.bom_id AND 
T1.product_id = T2.product_id 
ORDER BY T1.id;

Corregir errores en producciones que pierden el flujo al cambiar operarios y recalcular
=======================================================================================

SELECT  
T1.id, T1.name, T1.state, T2.id, T2.production_id, T2.state
FROM mrp_production T1, mrp_production_workcenter_line T2 
WHERE 
T1.id = T2.production_id AND 
T1.state = 'closed' AND 
T2.state = 'draft'
ORDER BY T1.name;


UPDATE mrp_production_workcenter_line
SET
state = 'done'
WHERE id IN
(
SELECT  
T2.id
FROM mrp_production T1, mrp_production_workcenter_line T2 
WHERE 
T1.id = T2.production_id AND 
T1.state = 'closed' AND 
T2.state = 'draft'
ORDER BY T1.name
);





http://www.aecoc.es/?id=59&plantilla=11&target=Men%FA%3AEst%E1ndares+GS1

http://bazaar.launchpad.net/~openerp-commiter/openobject-addons/stable_5.0-extra-addons/files/head:/partner_discount/






***********************************
PRUEBAS
***********************************
DROP TABLE public.update_cost_price;
DROP TABLE public.update_list_price;
DROP TABLE public.mrp_production_fixed_costs;
DROP TABLE public.mrp_production_manpower;
DROP TABLE public.mrp_production_unit_costs;
DROP TABLE public.account_balance_full_report;
DROP TABLE public.account_account_chart_report;
DROP TABLE public.account_general_ledger_cumulative_report;
DROP TABLE public.account_invoice_list.report;
DROP TABLE public.account_journal_entries_report;
DROP TABLE public.product_fields;
DROP TABLE public.greendot_fees;
DROP TABLE public.product_greendot;
DROP TABLE public.print_report;
DROP TABLE public.cost_structure_elements;
DROP TABLE public.print_report_product_datasheet;
DROP TABLE public.report_planning;





Corregir compañia de direcciones de empresa
=======================================================================================

SELECT  
T1.id, T1.name, T1.company_id, T2.id, T2.street, T2.company_id
FROM res_partner T1, res_partner_address T2 
WHERE 
T1.id = T2.partner_id AND 
T1.company_id <> T2.company_id 
ORDER BY T1.id;

CAMBIAR EL ID DE LA EMPRES POR 1, 2 Y 3 EN LOS DOS SITIOS
UPDATE res_partner_address
SET
company_id = 3
WHERE id IN
(
SELECT  
T2.id
FROM res_partner T1, res_partner_address T2 
WHERE 
T1.id = T2.partner_id AND 
T1.company_id <> T2.company_id AND
T1.company_id = 3
ORDER BY T1.id
);

Módulos borrados
=======================================================================================
DELETE FROM ir_model WHERE model = 'update.cost.price';
DELETE FROM ir_model WHERE model = 'update.list.price';
DELETE FROM ir_model WHERE model = 'mrp.production.fixed.costs';
DELETE FROM ir_model WHERE model = 'mrp.production.manpower';
DELETE FROM ir_model WHERE model = 'mrp.production.unit.costs';
DELETE FROM ir_model WHERE model = 'account.balance.full.report';
DELETE FROM ir_model WHERE model = 'account.account.chart.report';
DELETE FROM ir_model WHERE model = 'account.general.ledger.cumulative.report';
DELETE FROM ir_model WHERE model = 'account.invoice.list.report';
DELETE FROM ir_model WHERE model = 'account.journal.entries.report';
DELETE FROM ir_model WHERE model = 'product.fields';
DELETE FROM ir_model WHERE model = 'greendot.fees';
DELETE FROM ir_model WHERE model = 'product.greendot';
DELETE FROM ir_model WHERE model = 'print.report';
DELETE FROM ir_model WHERE model = 'cost.structure.elements';
DELETE FROM ir_model WHERE model = 'print.report.product.datasheet';
DELETE FROM ir_model WHERE model = 'report.planning';

DELETE FROM ir_module_module WHERE name = 'account_analytic_required';
DELETE FROM ir_module_module WHERE name = 'account_invoice_analytics';
DELETE FROM ir_module_module WHERE name = 'account_jasper_report';
DELETE FROM ir_module_module WHERE name = 'account_overdue_report_simple';

DELETE FROM ir_module_module WHERE name = 'web_display_html';
DELETE FROM ir_module_module WHERE name = 'web_wysiwyg';


POR SI USO ESTE METODO LO GUARDO AQUI

    def _get_container_code(self, cr, uid, ids, field_name, arg, context=None):
        if context is None:
            context = {}
        res = {}
        for picking in self.browse(cr, uid, ids):
            if picking.purchase_id:
                res[picking.id] = picking.purchase_id.container_code
                print '*************************', res
        return res

        'container_code': fields.function(_get_container_code, string='Container Code', type='char', store=True, 
                           help="Container Code assigned to the order."),
                           
                           
                           
                           

tools.human_size(product.product_image)


notas: sales_forecast 
BORRAR 
DROP TABLE merge_sale_forecast;
DELETE FROM ir_model WHERE model = 'merge.sale.forecast';

Añadir valores
===============
INSERT INTO ir_property(create_uid, create_date, write_date, write_uid, value_text, value_float, name, value_integer, type, company_id, fields_id, value_datetime, value_binary, value_reference, res_id) VALUES (6, '2015-01-27 18:00:00', null, null, null, null, 'box', null, 'many2one', 3, 3602, null, null, 'product.product,4', 'product.product,140');



CODIGO PARA SIMULAR QUE GRABO UN REGISTRO Y DISPARE EL WRITE
        #--------------------------------------------------------------------------------------------------------------------
        acc_obj = self.pool.get('account.move.line')
        ids_obtenidos = acc_obj.search(cr, uid, [('account_id.type','in',['receivable','payable']),('invoice','<>',False)])
        acc_ids = acc_obj.browse(cr, uid, ids_obtenidos)
        print vals, context, ids
        a = 0
        b = 0
        c = 0
        for acc_line in acc_ids:
            a += 1
            #vals.update({'received_check' : acc_line.received_check})
            if uid == 3 or uid == 4:
                if not acc_line.amount_to_pay:
                    b += 1
                    print 'Actualizar......', a, b, c, acc_line.amount_to_pay, uid
                    acc_line.write({'received_check': acc_line.received_check})
                else:
                    c += 1
                    print 'No actualizar...', a, b, c, acc_line.amount_to_pay, uid



Si aparece algun error de location_id y es la 38 asignarle la 12

para modificar algun atributo de un campo sin hacer replace
                <field name="amount_untaxed" position = "attributes">
                    <attribute name="align">1.1</attribute>
                </field>


<!--
ORDENES DE APROVISIONAMIENTO (PROCUREMENT_ORDER)
Las que se han quedado en estado running, podemos arreglarlas así:
buscamos los posibles ids: SELECT * FROM wkf_instance WHERE res_type in ('mrp.production') and state = 'active' order by res_id;
hacemos un filtro avanzado en producciones por esos ids.
heredamos write para que al modificar la orden cancelada y modifciar la fecha programada salte el write provisionalmente.

class mrp_production(osv.osv):
    _inherit = 'mrp.production'

    def write(self, cr, uid, ids, vals, context=None, update=True, mini=True):
        if context is None:
            context = {}

        if isinstance(ids,(int,long)):
            ids = [ids]
        
        res = super(mrp_production, self).write(cr, uid, ids, vals, context=context, update=update, mini=mini)
        print vals.get('date_planned', False)
        if vals.get('date_planned', False) and uid == 3: #usuario quival
            workflow = netsvc.LocalService("workflow")
            for production in self.browse(cr, uid, ids, context=context):
                if production.state == 'cancel':
                    print 'Intento arreglar: ', production.id
                    workflow.trg_validate(uid, 'mrp.production', production.id, 'button_cancel', cr)
        return res

mrp_production()

-->


BORRAR COLUMNA TABLA:
=====================
--ALTER TABLE account_move_line DROP COLUMN payment_type;
--ALTER TABLE account_move_line DROP COLUMN amount_to_pay;
SELECT id, payment_type, amount_to_pay FROM account_move_line ORDER BY payment_type, id;

RECALCULAR AMOUNT_TO_PAY DE FORMA CORRECTA
============================================
--Primero borramos la columna
ALTER TABLE account_move_line DROP COLUMN amount_to_pay;
--Luego hacemos un update de la bd del módulo account_payment_extension
--Finalmente, si queremos podemos hacer un update all

RECALCULAR PAYMENT_TYPE DE FORMA CORRECTA
============================================
--Primero borramos la columna
ALTER TABLE account_move_line DROP COLUMN payment_type;
--Luego hacemos un update de la bd del módulo l10n_es_gestion_comercial
--Finalmente, si queremos podemos hacer un update all

POSIBLE ERROR EN DEVOLVER PRODUCTOS (CREATE_RETURNS)
====================================================
En addons/stock/wizard/stock_return_picking.py linea 201 
pone
move_obj.write(cr, uid, [move.id], {'move_history_ids2':[(4,new_move)]})
y creo que deberia poner
move_obj.write(cr, uid, [move.id], {'move_history_ids':[(4,new_move)]})

En principio no se usa este método porque está en uso crm_claim_rma que lo trata de otra forma
y por eso no lo modifico





